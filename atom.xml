<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shanecaiii</title>
  
  <subtitle>Welcome</subtitle>
  <link href="http://sasuke7chen.github.io/atom.xml" rel="self"/>
  
  <link href="http://sasuke7chen.github.io/"/>
  <updated>2021-04-08T12:59:02.850Z</updated>
  <id>http://sasuke7chen.github.io/</id>
  
  <author>
    <name>Ashane</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL作业</title>
    <link href="http://sasuke7chen.github.io/2021/0408sql-zuo-ye.html"/>
    <id>http://sasuke7chen.github.io/2021/0408sql-zuo-ye.html</id>
    <published>2021-04-08T12:45:36.000Z</published>
    <updated>2021-04-08T12:59:02.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL作业"><a href="#SQL作业" class="headerlink" title="SQL作业"></a>SQL作业</h1><blockquote><p>再多练练</p></blockquote><p>SELECT 字段1, 字段2, … (或者 *) （选择哪些数据列）</p><p>FROM 表名[, 表名…] （从哪些表里选择）</p><p>[JOIN 表名 ON 相等条件表达式] （这些表怎么连接）</p><p>[WHERE 条件表达式] （得到的数据怎么筛选）</p><p>[GROUP BY 字段] （需不需要对结果集进行分组）</p><p>[HAVING 条件表达式] （筛选分组后通过聚合函数得到的值）</p><p>[ORDER BY 字段]; （指定排序方式）</p><p><strong>现有关系模式如下：</strong> </p><p>学生（学号，姓名，性别，年龄）；</p><p>Student (sid, sname, sex, age);</p><p>课程（课程号，课程名，教师姓名）；</p><p>course (cid, cname, tname)；</p><p>选课表（课程号，学号，成绩）</p><p>SC (cid, sid, score, date)；</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--1.检索年龄大于20岁的男生的学号和姓名。</span><span class="token keyword">select</span> sid<span class="token punctuation">,</span> sname <span class="token keyword">from</span> Student <span class="token keyword">where</span> sex <span class="token operator">=</span> <span class="token string">'男'</span> <span class="token operator">and</span> age <span class="token operator">></span> <span class="token number">20</span><span class="token comment" spellcheck="true">--2.检索选修了姓刘的老师所教授的课程的女学生的姓名。</span><span class="token keyword">select</span> sname<span class="token keyword">from</span> Student<span class="token punctuation">,</span> Course<span class="token punctuation">,</span> SC<span class="token keyword">where</span> Student<span class="token punctuation">.</span>sid <span class="token operator">=</span> SC<span class="token punctuation">.</span>sid <span class="token operator">and</span> Course<span class="token punctuation">.</span>cid <span class="token operator">=</span> SC<span class="token punctuation">.</span>cid <span class="token operator">and</span> sex <span class="token operator">=</span> <span class="token string">'女'</span> <span class="token operator">and</span> tname <span class="token operator">like</span> <span class="token string">'刘%'</span><span class="token comment" spellcheck="true">--3.检索李想同学不学的课程的课程号和课程名。</span><span class="token keyword">select</span> Course<span class="token punctuation">.</span>cid<span class="token punctuation">,</span> cname<span class="token keyword">from</span> Course<span class="token punctuation">,</span> SC<span class="token keyword">where</span> Course<span class="token punctuation">.</span>cid <span class="token operator">=</span> SC<span class="token punctuation">.</span>cid<span class="token operator">and</span> Course<span class="token punctuation">.</span>cid <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> cid                        <span class="token keyword">from</span> Student<span class="token punctuation">,</span> SC                       <span class="token keyword">where</span> Student<span class="token punctuation">.</span>sid <span class="token operator">=</span> SC<span class="token punctuation">.</span>sid <span class="token operator">and</span> sname <span class="token operator">=</span> <span class="token string">'李想'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--4.检索至少选修了两门课程的学生的学号。</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> s1<span class="token punctuation">.</span>sid <span class="token keyword">from</span> SC s1<span class="token punctuation">,</span> SC s2<span class="token keyword">where</span> s1<span class="token punctuation">.</span>sid <span class="token operator">=</span> s2<span class="token punctuation">.</span>sid <span class="token operator">and</span> s1<span class="token punctuation">.</span>cid <span class="token operator">&lt;></span> s2<span class="token punctuation">.</span>cid<span class="token comment" spellcheck="true">--5.求刘老师所教授课程的每门课的平均成绩。</span><span class="token keyword">select</span> SC<span class="token punctuation">.</span>cid<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> avg_score<span class="token keyword">from</span> SC <span class="token keyword">join</span> Course <span class="token keyword">on</span> SC<span class="token punctuation">.</span>cid <span class="token operator">=</span> Course<span class="token punctuation">.</span>cid <span class="token keyword">where</span> tname <span class="token operator">like</span> <span class="token string">'刘%'</span><span class="token keyword">group</span> <span class="token keyword">by</span> SC<span class="token punctuation">.</span>cid<span class="token comment" spellcheck="true">--6.假设不存在重修的情况，请统计每门课的选修人数(选课人数超过两人的课程才统计)。</span><span class="token comment" spellcheck="true">--要求显示课程号和人数，查询结果按人数降序排列，若人数相同，按课程号升序排列。</span><span class="token keyword">select</span> cid<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">as</span> stu_total<span class="token keyword">from</span> SC<span class="token keyword">group</span> <span class="token keyword">by</span> cid<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">count</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token punctuation">,</span> cid<span class="token comment" spellcheck="true">--7.求年龄大于所有女生年龄的男生的姓名和年龄。</span><span class="token keyword">select</span> sname<span class="token punctuation">,</span> age<span class="token keyword">from</span> Student<span class="token keyword">where</span> sex <span class="token operator">=</span> <span class="token string">'男'</span> <span class="token operator">and</span> age <span class="token operator">></span> <span class="token keyword">all</span><span class="token punctuation">(</span><span class="token keyword">select</span> age                                <span class="token keyword">from</span> Student                               <span class="token keyword">where</span> sex <span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--8.假定不存在重修的情况，求选修了所有课程的学生的学号姓名。(可以不用相关子查询做)</span><span class="token comment" spellcheck="true">--（选出不存在没有选过的课程的学生</span><span class="token keyword">select</span> sid<span class="token punctuation">,</span> sname<span class="token keyword">from</span> Student A<span class="token keyword">where</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> cid                  <span class="token keyword">from</span> Course B                 <span class="token keyword">where</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span>                                   <span class="token keyword">from</span> SC C                                  <span class="token keyword">where</span> A<span class="token punctuation">.</span>sid <span class="token operator">=</span> C<span class="token punctuation">.</span>sid <span class="token operator">and</span> B<span class="token punctuation">.</span>cid <span class="token operator">=</span> C<span class="token punctuation">.</span>cid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--9.查询重修次数在2次以上的学生学号，课程号，重修次数</span><span class="token keyword">select</span> sid<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">as</span> retake<span class="token keyword">from</span> SC<span class="token keyword">group</span> <span class="token keyword">by</span> sid<span class="token punctuation">,</span> cid<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token comment" spellcheck="true">--10.查询重修学生人数最多的课程号，课程名，教师姓名</span><span class="token keyword">select</span> B<span class="token punctuation">.</span>cid<span class="token punctuation">,</span> cname<span class="token punctuation">,</span> tname<span class="token keyword">from</span> Course B<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">select</span> cid<span class="token punctuation">,</span> sid                 <span class="token keyword">from</span> SC                 <span class="token keyword">group</span> <span class="token keyword">by</span> cid<span class="token punctuation">,</span> sid                 <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> C<span class="token keyword">where</span> B<span class="token punctuation">.</span>cid <span class="token operator">=</span> C<span class="token punctuation">.</span>cid<span class="token keyword">group</span> <span class="token keyword">by</span> B<span class="token punctuation">.</span>cid<span class="token punctuation">,</span> cname<span class="token punctuation">,</span> tname<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token keyword">all</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span>                          <span class="token keyword">from</span> SC                          <span class="token keyword">group</span> <span class="token keyword">by</span> cid<span class="token punctuation">,</span> sid                          <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SQL作业&quot;&gt;&lt;a href=&quot;#SQL作业&quot; class=&quot;headerlink&quot; title=&quot;SQL作业&quot;&gt;&lt;/a&gt;SQL作业&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;再多练练&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SELECT 字段1, 字段2, … </summary>
      
    
    
    
    <category term="Homework" scheme="http://sasuke7chen.github.io/categories/Homework/"/>
    
    
    <category term="SQL" scheme="http://sasuke7chen.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>关于Java</title>
    <link href="http://sasuke7chen.github.io/2021/0408-guan-yu-java.html"/>
    <id>http://sasuke7chen.github.io/2021/0408-guan-yu-java.html</id>
    <published>2021-04-08T04:48:12.000Z</published>
    <updated>2021-04-08T13:19:19.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于Java"><a href="#关于Java" class="headerlink" title="关于Java"></a>关于Java</h1><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>Java可变参数的底层实现，实际上就是一个数组，简单的证明方式如下：<br>定义2个方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>上述代码在编译阶段就提示异常。原因是可变长参数编译后会被转成<code>Int[]</code>，也就是会另一个方法定义重复了。<br>想详细了解可变参数，也可以去看下编译后的JVM指令，具体可百度查询下，这里就不做详述了。</p><p>使用可变参数时，需要注意以下3点：<br>1、如果有明确的方法可调用，会优化选择”已明确的方法“，如果没有明确的方法，才会选择可变参数对应的方法。如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>执行，<code>test(1)</code>，会输出A</p><p>2、Java允许存在多个可变参数的方法，但在调用时如果有多个方法可供选择，则会出现编译时间的异常提示（ambiguous method call：不明确的方法调用）。如下代码：</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p> 在执行<code>test(1)</code>，2个方法都可以选择。则出现编译期的异常。<br> 像楼主说的，如果传的是数组为何又正常？通过上述描述，相信楼主也能明白其原因：<br> 如果执行<code>test(new int[]&#123;1&#125;)</code>,则<code>test(long... a)</code>是调用不到的（方法参数只接收<code>long[]/long/int/short/byte/char</code>），即能找可唯一选择的方法。</p><p>3、定义方法参数时，可变参数只能写在最后一个参数位置上，否则编译期会提示异常。</p><h2 id="继承：子类和父类的关系"><a href="#继承：子类和父类的关系" class="headerlink" title="继承：子类和父类的关系"></a>继承：子类和父类的关系</h2><h3 id="一、父类引用指向子类对象时"><a href="#一、父类引用指向子类对象时" class="headerlink" title="一、父类引用指向子类对象时"></a>一、父类引用指向子类对象时</h3><p>1、若子类覆盖了某方法，则父类引用调用子类重新定义的新方法</p><p>2、若子类未覆盖某方法，则父类引用调用父类本身的旧方法</p><p>3、若子类覆盖了某属性，但父类引用仍调用父类本身的旧属性</p><p>4、若子类未覆盖某属性，则父类引用调用父类本身的旧属性</p><p>5、父类引用不能访问子类新定义的方法</p><h3 id="二、子类引用指向自身对象时"><a href="#二、子类引用指向自身对象时" class="headerlink" title="二、子类引用指向自身对象时"></a>二、子类引用指向自身对象时</h3><p>1、若子类覆盖了某方法，则子类引用调用子类重新定义的新方法</p><p>2、若子类未覆盖某方法，则子类引用调用父类本身的旧方法</p><p>3、若子类覆盖了某属性，则子类引用调用子类重新定义的新属性</p><p>4、若子类未覆盖某属性，则子类引用调用父类本身的旧属性</p><p>5、子类引用可以访问子类新定义的方法</p><h3 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//B.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B.f1()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B.f2()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//C.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C.f1()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C.f3()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 父类引用指向子类对象</span>        b<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类覆盖了该方法，所以父类引用调用新方法</span>        b<span class="token punctuation">.</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类未覆盖该方法，所以父类引用调用旧方法</span>        <span class="token comment" spellcheck="true">// b.f3();此行去掉注释会报错，父类引用不能访问子类新定义方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类覆盖了该属性，但父类引用仍旧访问旧属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类未覆盖该属性，父类访问旧属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         C c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类引用指向自身对象</span>        c<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类覆盖了父类方法，所以调用新方法</span>        c<span class="token punctuation">.</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类未覆盖父类方法，所以调用旧方法</span>        c<span class="token punctuation">.</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类调用自己新定义的方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类覆盖了该属性，所以访问新属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类未覆盖该属性，所以访问旧属性</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class=" language-shell"><code class="language-shell">C.f1()B.f2()12 C.f1()B.f2()C.f3()32</code></pre><h2 id="构造方法与重载"><a href="#构造方法与重载" class="headerlink" title="构造方法与重载"></a>构造方法与重载</h2><p><strong>构造方法负责对象成员的初始值化工作</strong><br>1.方法名与类名相同<br>2.没有返回类型（void也不行）<br>3.构造方法是在创建实例时会被自动调用<br>4.一个类可能没有构造方法，但一定有系统隐蔽无参的构造方法，也有多个构造方法（他们之间构成重载）<br>5.定义了有参数的构造方法，就会屏蔽掉系统无参构造方法<br>6.构造方法不能被继承<br><strong>重载是名称相同、但参数不同的方法</strong><br>1.一个类中存在着两个以上同名方法<br>2.这两个方法的参数的组合必须不同（参数的数目不同或参数的类型的组合不同）<br>3.返回值不能作为两个方法是否构成重载的依据</p><h2 id="Java对象初始化"><a href="#Java对象初始化" class="headerlink" title="Java对象初始化"></a>Java对象初始化</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitializeDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> InitializeDemo t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitializeDemo</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> InitializeDemo t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitializeDemo</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"静态块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"构造块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">InitializeDemo</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">"   i="</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"    n="</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token operator">++</span>n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">print</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">"   i="</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"    n="</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>n<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">InitializeDemo</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>核心理念</strong>：</p><ol><li><p>静态属性和静态代码块都是在类加载的时候初始化和执行，两者的优先级别是一致的，且高于非静态成员，执行按照编码顺序。</p></li><li><p>非静态属性和匿名构造器在所有的构造方法之前执行，两者的优先级别一致，执行按照编码顺序。</p></li><li><p>以上执行完毕后执行构造方法中的代码。</p></li></ol><pre class=" language-shell"><code class="language-shell">1:j   i=0    n=02:构造块   i=1    n=13:t1   i=2    n=24:j   i=3    n=35:构造块   i=4    n=46:t2   i=5    n=57:i   i=6    n=68:静态块   i=7    n=999:j   i=8    n=10010:构造块   i=9    n=10111:init   i=10    n=102</code></pre><ol><li><p>运行main方法的时候，JVM会调用ClassLoader来加载<code>InitializeDemo</code>类，那么一起源于这次加载。</p></li><li><p>上面有四个静态属性，所以会按顺序逐一初始化这四个静态属性。</p></li><li><p><code>private static int k = 1;</code> 此时将k初始化为1。</p></li><li><p><code>private static InitializeDemo t1 = new InitializeDemo(&quot;t1&quot;);</code>创建<code>InitializeDemo</code>对象，那么按照核心理念中的顺序，先执行<code>private int j = print(&quot;j&quot;);</code>，打印出j，然后执行构造块，最后执行构造方法。</p></li><li><p><code>private static InitializeDemo t2 = new InitializeDemo(&quot;t2&quot;);</code>同步骤4。</p></li><li><p><code>private static int i = print(&quot;i&quot;);</code>打印i。</p></li><li><p><code>private static int n = 99;</code>直到这一步，n才被赋值为99，之前是从默认的0开始++的。</p></li><li><p>静态属性初始化完毕，代码走到静态块，打印出静态块，此时<code>n=99</code>。</p></li><li><p>静态属性和静态块执行完毕，然后执行main方法中的代码<code>new InitializeDemo(&quot;init&quot;);</code></p></li><li><p>main方法中创建对象，先初始化非静态属性，<code>private int j = print(&quot;j&quot;);</code>打印j，然后执行构造块，最后执行构造方法。</p></li></ol><blockquote><p>（静态属性=静态代码块）&gt; （非静态属性 = 构造块）&gt; 构造方法</p></blockquote><p><strong>总结一下核心理念</strong>：</p><ol><li>静态只在类加载的时候执行，且执行一次。</li><li>非静态只在实例化的时候执行，且每次实例化都执行。</li><li>静态在非静态之前执行。</li><li>静态属性和静态块的执行顺序取决于编码顺序，对它们一视同仁。</li><li>非静态属性和构造块的执行顺取决于编码顺序，对它们也一视同仁。</li><li>最后执行构造方法。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于Java&quot;&gt;&lt;a href=&quot;#关于Java&quot; class=&quot;headerlink&quot; title=&quot;关于Java&quot;&gt;&lt;/a&gt;关于Java&lt;/h1&gt;&lt;h2 id=&quot;可变参数&quot;&gt;&lt;a href=&quot;#可变参数&quot; class=&quot;headerlink&quot; title=&quot;可</summary>
      
    
    
    
    <category term="Summary" scheme="http://sasuke7chen.github.io/categories/Summary/"/>
    
    
    <category term="Java" scheme="http://sasuke7chen.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
