<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shanecaiii</title>
  
  <subtitle>Welcome</subtitle>
  <link href="http://sasuke7chen.github.io/atom.xml" rel="self"/>
  
  <link href="http://sasuke7chen.github.io/"/>
  <updated>2021-04-16T15:30:05.499Z</updated>
  <id>http://sasuke7chen.github.io/</id>
  
  <author>
    <name>Ashane</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java-polymorphism</title>
    <link href="http://sasuke7chen.github.io/2021/0416java-polymorphism.html"/>
    <id>http://sasuke7chen.github.io/2021/0416java-polymorphism.html</id>
    <published>2021-04-16T13:36:24.000Z</published>
    <updated>2021-04-16T15:30:05.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-多态-polymorphism"><a href="#Java-多态-polymorphism" class="headerlink" title="Java-多态(polymorphism)"></a>Java-多态(polymorphism)</h1><h3 id="为什么会出现多态"><a href="#为什么会出现多态" class="headerlink" title="为什么会出现多态?"></a>为什么会出现多态?</h3><ul><li><p>Java 中的引用变量有两个类型：</p><ul><li><strong>一个是编译时的类型，一个是运行时的类型，</strong> 编译时的类型由声明该变量时使用的类型决定， 运行时的类型由实际赋给该变量的对象决定。</li></ul></li><li><p><u>如果编译时的类型与运行时的类型不一致就会出现所谓的多态？</u></p></li></ul><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><ul><li>概念：是面向对象程序设计的另一个重要特征， 其基本含义是“拥有多种形态”，具体指在程序 中用相同的名称来表示不同的含义。例如：用同 一方法名来表示不同的操作 </li><li>类型：有两种 <ul><li>静态多态性：包括隐藏、方法的<u>重载</u> </li><li>动态多态性：在编译时不能确定所要调用的方法，只有在运行时才能确定所要调用的方法，又称为运行时的多态性</li></ul></li></ul><h4 id="静态多态（静多态）"><a href="#静态多态（静多态）" class="headerlink" title="静态多态（静多态）"></a>静态多态（静多态）</h4><ul><li>静态多态：即在编译时决定调用哪个方法，也称为编译时多态，也称为静态联编，也称为静绑定； </li><li>静态多态一般是指<strong>方法重载，方法隐藏</strong>； </li><li>只要构成了方法重载，就可以认为形成了 静态多态的条件；因此，静态多态与是否 发生继承没有必然联系。</li></ul><h5 id="方法重载（Overloading）"><a href="#方法重载（Overloading）" class="headerlink" title="方法重载（Overloading）"></a>方法重载（Overloading）</h5><ul><li>方法重载：Java允许在一个类中定义多个同名的方法，但这些方法的参数列表必须不同 <ul><li>方法名相同，参数个数、参数类型及参数顺序至少有一个不同 </li></ul></li><li>重载的目的：一般是为了创建一组要完成相似任务的成员方法。 </li><li>构造方法和静态成员方法都是可以重载，静态成员方法重载后的方法也可以是非静态成员方法。</li></ul><p>⚫ 注意1：对于方法重载，返回值类型与访问权限修饰符可以相同也可以不同，上述两项不能当做判断是否重载的条件。 </p><p>⚫ 注意2：如果一个类中有两个同名方法，其参数列表完全一样，仅仅返回值类型不同，则编译时会 产生错误</p><h4 id="动态多态（动多态）"><a href="#动态多态（动多态）" class="headerlink" title="动态多态（动多态）"></a>动态多态（动多态）</h4><ul><li>方法覆盖是子类的成员方法重写了父类的成员方法，重写的目的很大程度上是为了实现多态；</li><li> 动态多态：即在运行时才能确定调用哪个方法，也称为运行时多态，也称为动态联编，也称为动绑定； </li><li>Java中，实现多态有3个条件：<strong>继承、覆盖、向上转型</strong>，缺一不可。 <ul><li>“覆盖(override)方法、抽象方法和接口” 和动态联编关系紧密</li></ul></li></ul><h5 id="Java形成动态多态必须具备以下条件："><a href="#Java形成动态多态必须具备以下条件：" class="headerlink" title="Java形成动态多态必须具备以下条件："></a>Java形成动态多态必须具备以下条件：</h5><ul><li> Java形成动态多态必须具备以下条件： </li></ul><p>  ① 必须要有继承的情况存在； </p><p>  ② 在继承中必须要有方法覆盖； </p><p>  ③ 必须由父类的引用指向派生类的实例，并且通过父类的引用调用被覆盖的方法； </p><ul><li>由上述条件可以看出，<strong>继承是实现动态多态的首要前提</strong>。</li></ul><h5 id="方法覆盖（override）"><a href="#方法覆盖（override）" class="headerlink" title="方法覆盖（override）"></a>方法覆盖（override）</h5><ul><li><p>方法覆盖：方法名、参数个数、参数类型及参数顺序必须一致； </p></li><li><p>若父类方法定义时有异常抛出，则子类覆盖父类该方法时时，该方法也不能有更多的异常抛 出，否则编译时会产生错误</p></li><li><p>子类方法不能缩小父类方法的访问权限： </p><p>a) 一个package方法可以被重写为package、 protected和public的； </p><p>b) 一个protected方法可以被重写为protected和 public的； </p><p>c) 一个public方法只可以被重写为public的；</p><p>② <strong>私有方法、静态方法不能被覆盖</strong>，如果在子类出现了同签名的方法，就是方法隐藏； </p><p>③ 父类中，被final修饰的方法是最终方法，不 允许覆盖。</p></li></ul><h3 id="多态的实现：通过继承实现"><a href="#多态的实现：通过继承实现" class="headerlink" title="多态的实现：通过继承实现"></a>多态的实现：通过继承实现</h3><ul><li>Java中，一个类只能有一个父类，不能多继承。 </li><li>Java中，一个父类可以有多个子类，而在子类里可以覆盖父类的方法。 </li><li>当用父类的变量去引用不同的子类，在调用这个相同的方法的时候得到的结果和表现形式就不一样了，这就是多态，相同的消息（也就是调用相同的方法）会有不同的结果</li></ul><h3 id="采用多态技术的优点"><a href="#采用多态技术的优点" class="headerlink" title="采用多态技术的优点"></a>采用多态技术的优点</h3><ul><li>引进多态技术之后，尽管子类的对象千差万别，但都可以采用 <u>父类引用.方法名([参数]) 统一</u> 方式来调用，在程序运行时能根据子对象的不同得到不同的结果。 </li><li>应用程序不必为每一个派生类（子类）编写功能调用，只需要对抽象基类进行处理即可。这种“<strong>以不变应万变</strong>”的形式可以规范、简化程序设计，符合软件工程的“一个接口，多种方法”思想，可以大大提高程序的可复用性。 </li><li>派生类的功能可以被基类的引用变量引用，这叫<strong>向后兼容</strong>，可以提高程序的可扩充性和可维护性。</li></ul><h3 id="多态的运行机制（-）"><a href="#多态的运行机制（-）" class="headerlink" title="多态的运行机制（*）"></a>多态的运行机制（*）</h3><ul><li><p>Java多态机制是基于“方法绑定（binding）”，就是建立method call（方法调用）和method body（方法本体）的关联。 </p></li><li><p>如果绑定动作发生于程序执行前（由编译器和连接器完成），称为“先期绑定”或者早绑定。</p><ul><li>对于面向过程的语言它们没有其他选择，一定是先期绑定。比如C编译器只有一种method call，就是先期绑定。（C++有先期联编和后期联编）</li></ul></li><li><p>在编译阶段能够确定方法在内存什么位置的机制就叫静态绑定机制 </p></li><li><p><u>所有私有方法、静态方法、构造器及final修饰方法都是采用静态绑定机制</u>。在编译器阶段就已经指明了调用方法在常量池中的符号引用，JVM运行的时候只需要进行一 次常量池解析即可</p></li><li><p>当有动多态的情况时，解决方案便是所谓的后期绑定（late binding）即晚绑定：绑定动作将在执行期根据对象类型而进行。 </p></li><li><p>后期绑定也被称为执行期绑定（run-time  binding）或动态绑定（dynamic binding）。</p></li><li><p>对于Java当中的方法而言，final，static， private修饰的方法和构造方法是前期绑定。 </p></li><li><p>Java中，<strong>所有的private方法都被隐式的指定为final的</strong>。 </p></li><li><p>将方法声明为final类型的一是为了防止方法被覆盖，二是为了有效的关闭java中的动态绑定。或者说，<u>这么做便是告诉编译器： 动态绑定是不需要的</u>。于是编译器可以产生效率较佳的程序代码。</p></li></ul><h3 id="题外话：关于抽象类和抽象方法"><a href="#题外话：关于抽象类和抽象方法" class="headerlink" title="题外话：关于抽象类和抽象方法"></a>题外话：关于抽象类和抽象方法</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>一． 如果一个类继承自某个抽象父类，而没有具体实现抽象父类中的抽象方法，则必须定义为抽象类。 </p><p>二． <strong>抽象类是不能实例化的</strong>，但可以创建它的引用。它的作用是提供一个恰当的父类。因此一般作为其它类的超类,与final类正好相反。 </p><p>三． 如果一个类里有抽象的方法，则这个类就必须声明成抽象的。但一个抽象类中却可以没有抽象方法。</p><ul><li><p>抽象方法不能被private、final或static修饰。为什么？ </p><p>① 抽象方法必须被子类所覆盖，如果说明为 private，则外部无法访问，覆盖也无从谈起。 </p><p>② 若说明为static，即使不创建对象也能访问： 类名.方法名() ，这要求给出方法体，但与抽象方法的定义相矛盾。 </p><p>③ Final和abstract含义矛盾 </p></li><li><p>当类实现了一个接口，但并没有实现该接口的所有方法时，该类必须声明为抽象类，否则出错；</p></li></ul><h3 id="小结：多态的优点："><a href="#小结：多态的优点：" class="headerlink" title="小结：多态的优点："></a>小结：多态的优点：</h3><ul><li>应用程序不必为每一个派生类（子类）编写功能调用，只需要对抽象基类进行处理即可。这一招叫 “<strong>以不变应万变</strong>”，可以大大提高程序的可复用性。 </li><li>派生类的功能可以被基类的引用变量引用，这叫<strong>向后兼容</strong>，可以提高程序的可扩充性和可维护性，程序的调用界面清楚，可读性好，并解决代码冗余。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-多态-polymorphism&quot;&gt;&lt;a href=&quot;#Java-多态-polymorphism&quot; class=&quot;headerlink&quot; title=&quot;Java-多态(polymorphism)&quot;&gt;&lt;/a&gt;Java-多态(polymorphism)&lt;/h1</summary>
      
    
    
    
    <category term="Notes" scheme="http://sasuke7chen.github.io/categories/Notes/"/>
    
    
    <category term="Java" scheme="http://sasuke7chen.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>二分与前缀和</title>
    <link href="http://sasuke7chen.github.io/2021/0415-er-fen-yu-qian-zhui-he.html"/>
    <id>http://sasuke7chen.github.io/2021/0415-er-fen-yu-qian-zhui-he.html</id>
    <published>2021-04-15T06:27:21.000Z</published>
    <updated>2021-04-15T10:09:36.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分与前缀和"><a href="#二分与前缀和" class="headerlink" title="二分与前缀和"></a>二分与前缀和</h1><h2 id="AcWing-789-数的范围"><a href="#AcWing-789-数的范围" class="headerlink" title="AcWing 789.数的范围"></a>AcWing 789.数的范围</h2><p>给定一个按照升序排列的长度为 n 的整数数组，以及 q 个查询。</p><p>对于每个查询，返回一个元素 k 的起始位置和终止位置（位置从 0 开始计数）。</p><p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n 和 q，表示数组长度和询问个数。</p><p>第二行包含 n 个整数（均在 1∼10000 范围内），表示完整数组。</p><p>接下来 q 行，每行包含一个整数 k，表示一个询问元素。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 q 行，每行包含两个整数，表示所求元素的起始位置和终止位置。</p><p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤100000<br>1≤q≤10000<br>1≤k≤10000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><pre class=" language-shell"><code class="language-shell">6 31 2 2 3 3 4345</code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre class=" language-shell"><code class="language-shell">3 45 5-1 -1</code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> N 100010</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> q<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">findl</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span>            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">findr</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span>            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">!=</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin <span class="token operator">>></span> m<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">findl</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">findr</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="AcWing-1221-四平方和"><a href="#AcWing-1221-四平方和" class="headerlink" title="AcWing 1221.四平方和"></a>AcWing 1221.四平方和</h2><p>四平方和定理，又称为拉格朗日定理：</p><p>每个正整数都可以表示为至多 4 个正整数的平方和。</p><p>如果把 0 包括进去，就正好可以表示为 4 个数的平方和。</p><p>比如：</p><p>$5=0^2+0^2+1^2+2^2$<br>$7=1^2+1^2+1^2+2^2$</p><p>对于一个给定的正整数，可能存在多种平方和的表示法。</p><p>要求你对 44 个数排序：</p><p>$0≤a≤b≤c≤d$</p><p>并对所有的可能表示法按 $a,b,c,d$ 为联合主键升序排列，最后输出第一个表示法。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一个正整数 N。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出4个非负整数，按从小到大排序，中间用空格分开。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>$0&lt;N&lt;5∗10^6$</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><pre><code>5</code></pre><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><pre><code>0 0 1 2</code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//二分✔</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> N 2500010</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> s<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> t<span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> t<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token keyword">return</span> d <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>d<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> c <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> s <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>sum<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> cnt<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">*</span> c <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> c<span class="token punctuation">;</span> c <span class="token operator">*</span> c <span class="token operator">+</span> d <span class="token operator">*</span> d <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>d<span class="token punctuation">)</span><span class="token punctuation">{</span>            sum<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>c <span class="token operator">*</span> c <span class="token operator">+</span> d <span class="token operator">*</span> d<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> sum <span class="token operator">+</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">*</span> a <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> a <span class="token operator">*</span> a <span class="token operator">+</span> b <span class="token operator">*</span> b <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> n <span class="token operator">-</span> a <span class="token operator">*</span> a <span class="token operator">-</span> b <span class="token operator">*</span> b<span class="token punctuation">;</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> cnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token operator">>=</span> t<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>                <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token operator">==</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> sum<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">,</span> sum<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//哈希（超时）</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pii<span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> pii<span class="token operator">></span> s<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">*</span> c <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> c<span class="token punctuation">;</span> c <span class="token operator">*</span> c <span class="token operator">+</span> d <span class="token operator">*</span> d <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>d<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> c <span class="token operator">*</span> c <span class="token operator">+</span> d <span class="token operator">*</span> d<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>c<span class="token punctuation">,</span> d<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">*</span> a <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> a <span class="token operator">*</span> a <span class="token operator">+</span> b <span class="token operator">*</span> b <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> n <span class="token operator">-</span> a <span class="token operator">*</span> a <span class="token operator">-</span> b <span class="token operator">*</span> b<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span> s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二分与前缀和&quot;&gt;&lt;a href=&quot;#二分与前缀和&quot; class=&quot;headerlink&quot; title=&quot;二分与前缀和&quot;&gt;&lt;/a&gt;二分与前缀和&lt;/h1&gt;&lt;h2 id=&quot;AcWing-789-数的范围&quot;&gt;&lt;a href=&quot;#AcWing-789-数的范围&quot; class</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="http://sasuke7chen.github.io/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="C/C++" scheme="http://sasuke7chen.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>递归与递推</title>
    <link href="http://sasuke7chen.github.io/2021/0415-di-gui-yu-di-tui.html"/>
    <id>http://sasuke7chen.github.io/2021/0415-di-gui-yu-di-tui.html</id>
    <published>2021-04-15T05:44:42.000Z</published>
    <updated>2021-04-15T05:47:55.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="递归与递推"><a href="#递归与递推" class="headerlink" title="递归与递推"></a>递归与递推</h1><h2 id="AcWing-92-递归实现指数型枚举"><a href="#AcWing-92-递归实现指数型枚举" class="headerlink" title="AcWing 92.递归实现指数型枚举"></a>AcWing 92.递归实现指数型枚举</h2><p>从 $1∼n$ 这 $n$ 个整数中随机选取任意多个，输出所有可能的选择方案。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一个整数 $n$。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>每行输出一种方案。</p><p>同一行内的数必须升序排列，相邻两个数用恰好 11 个空格隔开。</p><p>对于没有选任何数的方案，输出空行。</p><p>本题有自定义校验器（SPJ），各行（不同方案）之间的顺序任意。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1≤n≤15$</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><pre><code>3</code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre><code>322 311 31 21 2 3</code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> state <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">>></span> j <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> depth<span class="token punctuation">,</span> <span class="token keyword">int</span> state<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>depth <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">>></span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> state <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> depth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cpp<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="AcWing-94-递归实现排列型枚举"><a href="#AcWing-94-递归实现排列型枚举" class="headerlink" title="AcWing 94. 递归实现排列型枚举"></a>AcWing 94. 递归实现排列型枚举</h2><p>把 $1∼n$ 这 $n$ 个整数排成一行后随机打乱顺序，输出所有可能的次序。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>一个整数 $n$。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>按照从小到大的顺序输出所有方案，每行 11 个。</p><p>首先，同一行相邻两个数用一个空格隔开。</p><p>其次，对于两个不同的行，对应下标的数一一比较，字典序较小的排在前面。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1≤n≤9$</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><pre><code>3</code></pre><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><pre><code>1 2 31 3 22 1 32 3 13 1 23 2 1</code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> f<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cpp        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="AcWing-95-费解的开关"><a href="#AcWing-95-费解的开关" class="headerlink" title="AcWing 95.费解的开关"></a>AcWing 95.费解的开关</h2><p>你玩过“拉灯”游戏吗？</p><p>25 盏灯排成一个 $5×5$ 的方形。</p><p>每一个灯都有一个开关，游戏者可以改变它的状态。</p><p>每一步，游戏者可以改变某一个灯的状态。</p><p>游戏者改变一个灯的状态会产生连锁反应：和这个灯上下左右相邻的灯也要相应地改变其状态。</p><p>我们用数字 1 表示一盏开着的灯，用数字 0 表示关着的灯。</p><p>下面这种状态</p><pre><code>1011101101101111000011011</code></pre><p>在改变了最左上角的灯的状态后将变成：</p><pre><code>0111111101101111000011011</code></pre><p>再改变它正中间的灯后状态将变成：</p><pre><code>0111111001110011010011011</code></pre><p>给定一些游戏的初始状态，编写程序判断游戏者是否可能在 6 步以内使所有的灯都变亮。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行输入正整数 $n$，代表数据中共有 $n$ 个待解决的游戏初始状态。</p><p>以下若干行数据分为 $n$ 组，每组数据有 5 行，每行 5 个字符。</p><p>每组数据描述了一个游戏的初始状态。</p><p>各组数据间用一个空行分隔。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>一共输出 $n$ 行数据，每行有一个小于等于 6 的整数，它表示对于输入数据中对应的游戏状态最少需要几步才能使所有灯变亮。</p><p>对于某一个游戏初始状态，若 6 步以内无法使所有灯变亮，则输出 −1。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>$0&lt;n≤500$</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><pre><code>3001110101110001110101110011101111011111011111111110111111111111111111111111</code></pre><p>输出样例：</p><pre><code>32-1</code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">define</span> INF 0x3f3f3f3f</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">char</span> g<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">turn</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> x <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> a <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">||</span> b <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> b <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> INF<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> new1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>new1<span class="token punctuation">,</span> g<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">>></span> j <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">turn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    res<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token function">turn</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> new1<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> f<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">></span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="AcWing-1209-带分数"><a href="#AcWing-1209-带分数" class="headerlink" title="AcWing 1209. 带分数"></a>AcWing 1209. 带分数</h2><p>$100$ 可以表示为带分数的形式：$100=3+\frac{69258}{714}$</p><p>还可以表示为：$100=82+\frac{3546}{197}$</p><p>注意特征：带分数中，数字 $1∼9$ 分别出现且只出现一次（不包含 $0$）。</p><p>类似这样的带分数，$100$ 有 $11$ 种表示法。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>一个正整数。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出输入数字用数码 $1∼9$ 不重复不遗漏地组成带分数表示的全部种数。</p><h4 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1≤N&lt;10^6$</p><h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><pre><code>100</code></pre><h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><pre><code>11</code></pre><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><pre><code>105</code></pre><h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><pre><code>6</code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            n <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">8</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span>                p <span class="token operator">=</span> p <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span> m <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>m<span class="token punctuation">)</span>                q <span class="token operator">=</span> q <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> n <span class="token operator">+</span> p <span class="token operator">/</span> q <span class="token operator">&amp;&amp;</span> p <span class="token operator">%</span> q <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> sum<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>        <span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">next_permutation</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="AcWing-116-飞行员兄弟"><a href="#AcWing-116-飞行员兄弟" class="headerlink" title="AcWing 116.飞行员兄弟"></a>AcWing 116.飞行员兄弟</h2><p>“飞行员兄弟”这个游戏，需要玩家顺利的打开一个拥有 $16$ 个把手的冰箱。</p><p>已知每个把手可以处于以下两种状态之一：打开或关闭。</p><p>只有当所有把手都打开时，冰箱才会打开。</p><p>把手可以表示为一个 $4×4$ 的矩阵，您可以改变任何一个位置 $[i,j][i,j]$ 上把手的状态。</p><p>但是，这也会使得第 $i$ 行和第 $j$ 列上的所有把手的状态也随着改变。</p><p>请你求出打开冰箱所需的切换把手的次数最小值是多少。</p><h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一共包含四行，每行包含四个把手的初始状态。</p><p>符号 <code>+</code> 表示把手处于闭合状态，而符号 <code>-</code> 表示把手处于打开状态。</p><p>至少一个手柄的初始状态是关闭的。</p><h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>第一行输出一个整数 $N$，表示所需的最小切换把手次数。</p><p>接下来 $N$ 行描述切换顺序，每行输出两个整数，代表被切换状态的把手的行号和列号，数字之间用空格隔开。</p><p><strong>注意</strong>：如果存在多种打开冰箱的方式，则按照优先级整体从上到下，同行从左到右打开。</p><h4 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1≤i,j≤4$</p><h4 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h4><pre><code>-+-----------+--</code></pre><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><pre><code>61 11 31 44 14 34 4</code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pii<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> g<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        string s<span class="token punctuation">;</span>        cin <span class="token operator">>></span> s<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span>                state <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>                g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>pii<span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//枚举操作k</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> state<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>pii<span class="token operator">></span> path<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">>></span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> x <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> y <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>                now <span class="token operator">^</span><span class="token operator">=</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>                path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>now <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">=</span> path<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">:</span> res<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;递归与递推&quot;&gt;&lt;a href=&quot;#递归与递推&quot; class=&quot;headerlink&quot; title=&quot;递归与递推&quot;&gt;&lt;/a&gt;递归与递推&lt;/h1&gt;&lt;h2 id=&quot;AcWing-92-递归实现指数型枚举&quot;&gt;&lt;a href=&quot;#AcWing-92-递归实现指数型枚举&quot; c</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="http://sasuke7chen.github.io/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="C/C++" scheme="http://sasuke7chen.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Java-inheritance</title>
    <link href="http://sasuke7chen.github.io/2021/0409java-inheritance.html"/>
    <id>http://sasuke7chen.github.io/2021/0409java-inheritance.html</id>
    <published>2021-04-09T12:18:11.000Z</published>
    <updated>2021-04-09T14:11:08.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-继承-inheritance"><a href="#Java-继承-inheritance" class="headerlink" title="Java-继承(inheritance)"></a>Java-继承(inheritance)</h1><p><strong>设计面向对象语言的初衷</strong></p><ul><li>可维护</li><li>可扩展</li><li>代码复用</li><li>低耦合</li></ul><h2 id="理解继承"><a href="#理解继承" class="headerlink" title="理解继承"></a>理解继承</h2><h3 id="细说继承"><a href="#细说继承" class="headerlink" title="细说继承"></a>细说继承</h3><ul><li>继承是使用已存在的类的定义作为基础，建立新类的技术</li><li>继承是在保留原有类的数据成员和成员函数的基础上，派生出新类，新的类可以有某种程度的变异</li><li>通过继承，新类自动具有了原有类的所有数据成员和成员函数，因而只需定义原有类型没有的新的数据成员和成员函数。实现了软件复用，使得类之间具备了层次性</li><li>通过继承和派生形成的类族，反映了面向对象问题域、主题等概念。</li></ul><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><ol><li><p>被继承的类称为父类（superclass）,继承后产生的类称为子类（subclass）。 </p></li><li><p>单继承：如果子类只能有一个直接父类，称为单继承。 </p></li></ol><ul><li>例如，轮船、客轮；人、大人 。 </li></ul><ol start="3"><li>多继承：如果子类可以有多个直接父类，称为多继承。 </li></ol><ul><li><p>例如，客轮是轮船和客运工具的子类 </p></li><li><p>例如，沙发床是沙发和床的子类</p></li></ul><h3 id="基类和派生类的关系"><a href="#基类和派生类的关系" class="headerlink" title="基类和派生类的关系"></a>基类和派生类的关系</h3><ul><li><p>基类是对若干个派生类的抽象 </p><ul><li>基类抽取了派生类的公共特征，在设计类时，应该将通用的方法放到超类中</li></ul></li><li><p>派生类是基类的具体化</p><ul><li>通过扩展超类定义子类的时候，仅需指出子类与超类的不同之处，通过增加数据成员或成员函数将基类变为某种更有用的类型</li></ul></li><li><p>派生类可以看作基类定义的延续（抽象类在多态中细说）</p><ul><li>先定义一个抽象基类，该基类中有些操作并未实现</li><li>然后定义非抽象的派生类，实现抽象基类中未实现的操作</li></ul></li></ul><h4 id="子类从父类那里继承了什么？"><a href="#子类从父类那里继承了什么？" class="headerlink" title="子类从父类那里继承了什么？"></a>子类从父类那里继承了什么？</h4><ol><li><p>子类拥有父类的所有属性和方法，只不过父类的私有属性和方法，子类是无法直接访问到的。</p></li><li><p>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</p></li><li><p>子类可以用自己的方式实现父类的方法。（方法覆盖）。</p></li></ol><h4 id="子类从父类那里不能继承什么？"><a href="#子类从父类那里不能继承什么？" class="headerlink" title="子类从父类那里不能继承什么？"></a>子类从父类那里不能继承什么？</h4><ul><li>子类不能继承父类的构造方法    <ul><li>如何解决？</li></ul></li></ul><h3 id="继承的进一步理解"><a href="#继承的进一步理解" class="headerlink" title="继承的进一步理解"></a>继承的进一步理解</h3><ul><li><p>继承避免了公用代码的重复开发，减少代码的冗余，提高程序的复用性；</p></li><li><p>支持多态（通过向上映射），提高程序的可扩展性；</p></li><li><p>继承是类实现可重用性和可扩充性的关键持征。在继承关系下类之间组成网状的层次结构。</p></li><li><p>通过继承增强一致性，从而减少模块间的接口和界面。</p></li></ul><h2 id="Java继承"><a href="#Java继承" class="headerlink" title="Java继承"></a>Java继承</h2><ul><li><p><strong>Java不支持类的多继承</strong>，但支持接口的多继承。</p></li><li><p>Java中的继承通过关键字<strong>extends</strong>实现。</p></li><li><p>类继承的格式：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span><span class="token keyword">class</span> 类名 <span class="token keyword">extends</span> 父类名<span class="token punctuation">{</span>    类体；<span class="token punctuation">}</span></code></pre></li></ul><h4 id="子类构造函数"><a href="#子类构造函数" class="headerlink" title="子类构造函数"></a>子类构造函数</h4><ul><li>构造函数不能被继承；</li><li>无参子类构造函数的编写<ul><li>子类可以通过**super()**显示调用父类无参的构造函数，也可以隐式调用</li></ul></li><li>有参子类构造函数的编写<ul><li>初始化父类的成员变量；</li><li>初始化子类的成员变量</li><li>必须显示调用父类有参构造函数</li></ul></li><li>无论使用this调用本类构造函数，还是使用super调用父类构造函数，都必须是<strong>该方法体中的第一条可以执行语句</strong>，否则会产生语法错误。</li></ul><h4 id="子类对象的生成-构造函数的调用顺序"><a href="#子类对象的生成-构造函数的调用顺序" class="headerlink" title="子类对象的生成(构造函数的调用顺序)"></a>子类对象的生成(构造函数的调用顺序)</h4><ul><li>创建子类对象时，子类总是按<strong>层次结构从上到下</strong>的顺序调用所有超类的构造函数。如果继承和组合联用，要先构造基类的构造函数，然后调用组合对象的构造函数（组合按照声明的顺序调用）。</li><li>如果父类没有不带参数的构造方法，则在子类的构造方法中必须明确的告诉调用父类的某个带参数的构造方法，通过<strong>super关键字</strong>，这条语句还必须出现在构造方法的第一句。</li></ul><hr><ul><li><p>子类创建对象时，<strong>子类的构造方法</strong>总是先调用父类的某个构造方法，完成父类部分的创建；然后再调用子类自己的构造方法，完成子类部分的创建。</p></li><li><p>如果子类的构造方法没有明显地指明使用父类的哪个构造方法，子类就调用父类的不带参数的构造方法 。</p></li><li><p>子类在创建一个子类对象时，不仅子类中声明的成员变量被分配了内存，而且父类的所有的成员变量也都分配了内存空间，但子类只能操作继承的那部分成员变量 。</p></li><li><p>子类可以通过继承的方法来操作子类未继承的变量和方法 。</p></li></ul><h4 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h4><ol><li><p>如果子类调用父类的构造函数，则通过 <strong>super()</strong> 调用来实现。</p></li><li><p>如果子类调用父类的同名方法，则通过 **super.方法名() **来实现。</p></li></ol><h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h4><ol><li>this变量代表对象本身。</li><li>当类中有两个同名变量，一个属于类的成员变量，而另一个属于某个特定的方法（方法中的局部变量），使用this区分成员变量和局部变量。</li><li>使用this简化构造函数的调用。</li></ol><h4 id="this引用与super引用的对比"><a href="#this引用与super引用的对比" class="headerlink" title="this引用与super引用的对比"></a>this引用与super引用的对比</h4><p>Java 每个类都默认地具有 null、this、 super三个域，所以在任何类中都可以不加说明就可以直接引用它们：</p><ol><li>null ：代表“空”，用在定义一个对象但尚未为其开辟内存空间时。</li><li>this 和 super ：是常用的指代子类对象和父类对象的关键字</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>this用于：</strong></p><ol><li>引用自身对象的成员变量<ul><li>this.age;</li></ul></li><li>引用自身对象的成员方法<ul><li>this.diaplay();</li></ul></li><li>调用自身的构造方法<ul><li>this(“Jack”,Male,10);</li></ul></li></ol><p><strong>super用于：</strong></p><p><strong>Note：</strong></p><ol><li>无论使用this调用本类构造函数，还是使用super调用父类构造函数，都必须是该方法体中的第一条可以执行语句。</li><li>否则会产生语法错误。</li></ol><p><a href="https://imgtu.com/i/cUBwTO"><img src="https://z3.ax1x.com/2021/04/09/cUBwTO.png" alt="复习访问修饰符"></a></p><h4 id="派生类-子类成员（变量和方法）"><a href="#派生类-子类成员（变量和方法）" class="headerlink" title="派生类/子类成员（变量和方法）"></a>派生类/子类成员（变量和方法）</h4><ul><li>保护成员可以被派生类直接访问</li><li>公共成员可以被派生类直接访问</li><li>如果子类和父类位于同一个包中，子类可 以直接访问父类的不加权限修饰符的成员</li><li>派生类可以重新定义基类的成员函数（覆盖）</li><li>派生类可以添加自己的新成员（变量和方 法）</li></ul><h4 id="保持基类数据成员私有性"><a href="#保持基类数据成员私有性" class="headerlink" title="保持基类数据成员私有性"></a>保持基类数据成员私有性</h4><p>将基类数据成员定义成private</p><ul><li>派生类中通过相应的访问函数进行访问</li><li>优点：保持基类的封装性</li><li>缺点：降低了访问效率</li></ul><h4 id="关于保护成员的使用"><a href="#关于保护成员的使用" class="headerlink" title="关于保护成员的使用"></a>关于保护成员的使用</h4><ul><li>保护成员会破坏基类的封装性<ul><li>派生类可以直接访问和修改</li></ul></li><li>关于保护成员的使用<ul><li>如果基类仅向其派生类提供服务，而不对其他客户提供该服务，使用protected成员访问说明符是合适的</li><li>例如Owner和Son、Wife、Daughter是父子关系，Owner的车和房产可以被子类直接访问，但是不对其他类开放，那么车和房产可以声明为protected的权限。</li></ul></li></ul><h4 id="向上转型-upcasting"><a href="#向上转型-upcasting" class="headerlink" title="向上转型(upcasting)"></a>向上转型(upcasting)</h4><ul><li>将子类转换成父类，在继承关系上面是向上移动的，所以一般称之为向上转型或者向上映射。</li><li>由于向上转型是从一个叫专用类型向较通用类型转换，所以它总是安全的，唯一发生变化的可能就是属性和方法的丢失。</li><li>这就是为什么编译器在“未曾明确表示转型”或者“未曾指定特殊标记”的情况下，仍然允许向上转型的原因。</li></ul><p><a href="https://imgtu.com/i/cUBBkD"><img src="https://z3.ax1x.com/2021/04/09/cUBBkD.png" alt="示例代码"></a></p><p><strong>缺憾：</strong> 只能调用父类中定义的属性和方法，对于子类中的方法和属性它就望尘莫及了，必须<strong>强制转成子类类型</strong></p><h4 id="变量隐藏"><a href="#变量隐藏" class="headerlink" title="变量隐藏"></a>变量隐藏</h4><ol><li><p>变量隐藏：在子类对父类的继承中，如果子类的成员变量和父类的成员变量同名，此时称为子类隐藏（override）了父类的成员变量。</p></li><li><p>子类若要引用父类的同名变量。要用 super 关键字做前缀加圆点操作符引用, 即<strong>super.变量名</strong></p></li></ol><h4 id="方法覆盖"><a href="#方法覆盖" class="headerlink" title="方法覆盖"></a>方法覆盖</h4><ol><li>方法覆盖：在子类中重写父类的方法，它们的名称、参数以及返回类型完全相同。</li><li>通过改写方法体来完成不同的功能</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="继承是否破坏了类的封装性？"><a href="#继承是否破坏了类的封装性？" class="headerlink" title="继承是否破坏了类的封装性？"></a>继承是否破坏了类的封装性？</h3><ul><li>是的。继承破坏了封装性，换句话说，子类依赖于父类的实现细节。**继承很容易改变父类实现的细节(所以父类中能写成final尽量写成final)**，即使父类整体没有问题，也有可能因为子类细节实现不当，而破坏父类的约束。</li><li>其实这是一个平衡关系，不是绝对关系，一定程度的封装和一定程度的继承，可以提高开发效率，继承破坏了封装， 但是有时继承是必须的，为了继承牺牲一定的封装是允许的。不能绝对的为了封装，就不去继承。</li></ul><h3 id="谨慎继承"><a href="#谨慎继承" class="headerlink" title="谨慎继承"></a>谨慎继承</h3><ul><li>继承是一种强耦合关系。父类变，子类就必须变。</li><li>继承破坏了封装，子类可以重写父类的方法，子类可以直接访问保护成员。</li><li>那么到底要不要使用继承呢？<ul><li>《Think in java》中提供了解决办法：问一问自己是否需要从子类向父类进行向上转型。如果<strong>必须向上转型</strong>，则继承是必要的，但是如果不需要，则应当好好考虑自己是否需要继承。</li></ul></li></ul><h3 id="继承的使用原则"><a href="#继承的使用原则" class="headerlink" title="继承的使用原则"></a>继承的使用原则</h3><ul><li>合理使用继承，谨慎继承，<strong>继承树的层次不可太多</strong></li><li>继承是一种提高程序代码的可重用性、以及提高系统的可扩展性的有效手段</li><li>但是，如果继承树非常复杂、或者随便扩展本来不是专门为继承而设计的类，反而会削弱系统的可扩展性和可维护性</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-继承-inheritance&quot;&gt;&lt;a href=&quot;#Java-继承-inheritance&quot; class=&quot;headerlink&quot; title=&quot;Java-继承(inheritance)&quot;&gt;&lt;/a&gt;Java-继承(inheritance)&lt;/h1&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="Notes" scheme="http://sasuke7chen.github.io/categories/Notes/"/>
    
    
    <category term="Java" scheme="http://sasuke7chen.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SQL作业</title>
    <link href="http://sasuke7chen.github.io/2021/0408sql-zuo-ye.html"/>
    <id>http://sasuke7chen.github.io/2021/0408sql-zuo-ye.html</id>
    <published>2021-04-08T12:45:36.000Z</published>
    <updated>2021-04-08T12:59:02.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL作业"><a href="#SQL作业" class="headerlink" title="SQL作业"></a>SQL作业</h1><blockquote><p>再多练练</p></blockquote><p>SELECT 字段1, 字段2, … (或者 *) （选择哪些数据列）</p><p>FROM 表名[, 表名…] （从哪些表里选择）</p><p>[JOIN 表名 ON 相等条件表达式] （这些表怎么连接）</p><p>[WHERE 条件表达式] （得到的数据怎么筛选）</p><p>[GROUP BY 字段] （需不需要对结果集进行分组）</p><p>[HAVING 条件表达式] （筛选分组后通过聚合函数得到的值）</p><p>[ORDER BY 字段]; （指定排序方式）</p><p><strong>现有关系模式如下：</strong> </p><p>学生（学号，姓名，性别，年龄）；</p><p>Student (sid, sname, sex, age);</p><p>课程（课程号，课程名，教师姓名）；</p><p>course (cid, cname, tname)；</p><p>选课表（课程号，学号，成绩）</p><p>SC (cid, sid, score, date)；</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--1.检索年龄大于20岁的男生的学号和姓名。</span><span class="token keyword">select</span> sid<span class="token punctuation">,</span> sname <span class="token keyword">from</span> Student <span class="token keyword">where</span> sex <span class="token operator">=</span> <span class="token string">'男'</span> <span class="token operator">and</span> age <span class="token operator">></span> <span class="token number">20</span><span class="token comment" spellcheck="true">--2.检索选修了姓刘的老师所教授的课程的女学生的姓名。</span><span class="token keyword">select</span> sname<span class="token keyword">from</span> Student<span class="token punctuation">,</span> Course<span class="token punctuation">,</span> SC<span class="token keyword">where</span> Student<span class="token punctuation">.</span>sid <span class="token operator">=</span> SC<span class="token punctuation">.</span>sid <span class="token operator">and</span> Course<span class="token punctuation">.</span>cid <span class="token operator">=</span> SC<span class="token punctuation">.</span>cid <span class="token operator">and</span> sex <span class="token operator">=</span> <span class="token string">'女'</span> <span class="token operator">and</span> tname <span class="token operator">like</span> <span class="token string">'刘%'</span><span class="token comment" spellcheck="true">--3.检索李想同学不学的课程的课程号和课程名。</span><span class="token keyword">select</span> Course<span class="token punctuation">.</span>cid<span class="token punctuation">,</span> cname<span class="token keyword">from</span> Course<span class="token punctuation">,</span> SC<span class="token keyword">where</span> Course<span class="token punctuation">.</span>cid <span class="token operator">=</span> SC<span class="token punctuation">.</span>cid<span class="token operator">and</span> Course<span class="token punctuation">.</span>cid <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> cid                        <span class="token keyword">from</span> Student<span class="token punctuation">,</span> SC                       <span class="token keyword">where</span> Student<span class="token punctuation">.</span>sid <span class="token operator">=</span> SC<span class="token punctuation">.</span>sid <span class="token operator">and</span> sname <span class="token operator">=</span> <span class="token string">'李想'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--4.检索至少选修了两门课程的学生的学号。</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> s1<span class="token punctuation">.</span>sid <span class="token keyword">from</span> SC s1<span class="token punctuation">,</span> SC s2<span class="token keyword">where</span> s1<span class="token punctuation">.</span>sid <span class="token operator">=</span> s2<span class="token punctuation">.</span>sid <span class="token operator">and</span> s1<span class="token punctuation">.</span>cid <span class="token operator">&lt;></span> s2<span class="token punctuation">.</span>cid<span class="token comment" spellcheck="true">--5.求刘老师所教授课程的每门课的平均成绩。</span><span class="token keyword">select</span> SC<span class="token punctuation">.</span>cid<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> avg_score<span class="token keyword">from</span> SC <span class="token keyword">join</span> Course <span class="token keyword">on</span> SC<span class="token punctuation">.</span>cid <span class="token operator">=</span> Course<span class="token punctuation">.</span>cid <span class="token keyword">where</span> tname <span class="token operator">like</span> <span class="token string">'刘%'</span><span class="token keyword">group</span> <span class="token keyword">by</span> SC<span class="token punctuation">.</span>cid<span class="token comment" spellcheck="true">--6.假设不存在重修的情况，请统计每门课的选修人数(选课人数超过两人的课程才统计)。</span><span class="token comment" spellcheck="true">--要求显示课程号和人数，查询结果按人数降序排列，若人数相同，按课程号升序排列。</span><span class="token keyword">select</span> cid<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">as</span> stu_total<span class="token keyword">from</span> SC<span class="token keyword">group</span> <span class="token keyword">by</span> cid<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">count</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token punctuation">,</span> cid<span class="token comment" spellcheck="true">--7.求年龄大于所有女生年龄的男生的姓名和年龄。</span><span class="token keyword">select</span> sname<span class="token punctuation">,</span> age<span class="token keyword">from</span> Student<span class="token keyword">where</span> sex <span class="token operator">=</span> <span class="token string">'男'</span> <span class="token operator">and</span> age <span class="token operator">></span> <span class="token keyword">all</span><span class="token punctuation">(</span><span class="token keyword">select</span> age                                <span class="token keyword">from</span> Student                               <span class="token keyword">where</span> sex <span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--8.假定不存在重修的情况，求选修了所有课程的学生的学号姓名。(可以不用相关子查询做)</span><span class="token comment" spellcheck="true">--（选出不存在没有选过的课程的学生</span><span class="token keyword">select</span> sid<span class="token punctuation">,</span> sname<span class="token keyword">from</span> Student A<span class="token keyword">where</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> cid                  <span class="token keyword">from</span> Course B                 <span class="token keyword">where</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span>                                   <span class="token keyword">from</span> SC C                                  <span class="token keyword">where</span> A<span class="token punctuation">.</span>sid <span class="token operator">=</span> C<span class="token punctuation">.</span>sid <span class="token operator">and</span> B<span class="token punctuation">.</span>cid <span class="token operator">=</span> C<span class="token punctuation">.</span>cid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--9.查询重修次数在2次以上的学生学号，课程号，重修次数</span><span class="token keyword">select</span> sid<span class="token punctuation">,</span> cid<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">as</span> retake<span class="token keyword">from</span> SC<span class="token keyword">group</span> <span class="token keyword">by</span> sid<span class="token punctuation">,</span> cid<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token comment" spellcheck="true">--10.查询重修学生人数最多的课程号，课程名，教师姓名</span><span class="token keyword">select</span> B<span class="token punctuation">.</span>cid<span class="token punctuation">,</span> cname<span class="token punctuation">,</span> tname<span class="token keyword">from</span> Course B<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">select</span> cid<span class="token punctuation">,</span> sid                 <span class="token keyword">from</span> SC                 <span class="token keyword">group</span> <span class="token keyword">by</span> cid<span class="token punctuation">,</span> sid                 <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> C<span class="token keyword">where</span> B<span class="token punctuation">.</span>cid <span class="token operator">=</span> C<span class="token punctuation">.</span>cid<span class="token keyword">group</span> <span class="token keyword">by</span> B<span class="token punctuation">.</span>cid<span class="token punctuation">,</span> cname<span class="token punctuation">,</span> tname<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token keyword">all</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span>                          <span class="token keyword">from</span> SC                          <span class="token keyword">group</span> <span class="token keyword">by</span> cid<span class="token punctuation">,</span> sid                          <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SQL作业&quot;&gt;&lt;a href=&quot;#SQL作业&quot; class=&quot;headerlink&quot; title=&quot;SQL作业&quot;&gt;&lt;/a&gt;SQL作业&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;再多练练&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SELECT 字段1, 字段2, … </summary>
      
    
    
    
    <category term="Homework" scheme="http://sasuke7chen.github.io/categories/Homework/"/>
    
    
    <category term="SQL" scheme="http://sasuke7chen.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>关于Java</title>
    <link href="http://sasuke7chen.github.io/2021/0408-guan-yu-java.html"/>
    <id>http://sasuke7chen.github.io/2021/0408-guan-yu-java.html</id>
    <published>2021-04-08T04:48:12.000Z</published>
    <updated>2021-04-08T13:19:19.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于Java"><a href="#关于Java" class="headerlink" title="关于Java"></a>关于Java</h1><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>Java可变参数的底层实现，实际上就是一个数组，简单的证明方式如下：<br>定义2个方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>上述代码在编译阶段就提示异常。原因是可变长参数编译后会被转成<code>Int[]</code>，也就是会另一个方法定义重复了。<br>想详细了解可变参数，也可以去看下编译后的JVM指令，具体可百度查询下，这里就不做详述了。</p><p>使用可变参数时，需要注意以下3点：<br>1、如果有明确的方法可调用，会优化选择”已明确的方法“，如果没有明确的方法，才会选择可变参数对应的方法。如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>执行，<code>test(1)</code>，会输出A</p><p>2、Java允许存在多个可变参数的方法，但在调用时如果有多个方法可供选择，则会出现编译时间的异常提示（ambiguous method call：不明确的方法调用）。如下代码：</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p> 在执行<code>test(1)</code>，2个方法都可以选择。则出现编译期的异常。<br> 像楼主说的，如果传的是数组为何又正常？通过上述描述，相信楼主也能明白其原因：<br> 如果执行<code>test(new int[]&#123;1&#125;)</code>,则<code>test(long... a)</code>是调用不到的（方法参数只接收<code>long[]/long/int/short/byte/char</code>），即能找可唯一选择的方法。</p><p>3、定义方法参数时，可变参数只能写在最后一个参数位置上，否则编译期会提示异常。</p><h2 id="继承：子类和父类的关系"><a href="#继承：子类和父类的关系" class="headerlink" title="继承：子类和父类的关系"></a>继承：子类和父类的关系</h2><h3 id="一、父类引用指向子类对象时"><a href="#一、父类引用指向子类对象时" class="headerlink" title="一、父类引用指向子类对象时"></a>一、父类引用指向子类对象时</h3><p>1、若子类覆盖了某方法，则父类引用调用子类重新定义的新方法</p><p>2、若子类未覆盖某方法，则父类引用调用父类本身的旧方法</p><p>3、若子类覆盖了某属性，但父类引用仍调用父类本身的旧属性</p><p>4、若子类未覆盖某属性，则父类引用调用父类本身的旧属性</p><p>5、父类引用不能访问子类新定义的方法</p><h3 id="二、子类引用指向自身对象时"><a href="#二、子类引用指向自身对象时" class="headerlink" title="二、子类引用指向自身对象时"></a>二、子类引用指向自身对象时</h3><p>1、若子类覆盖了某方法，则子类引用调用子类重新定义的新方法</p><p>2、若子类未覆盖某方法，则子类引用调用父类本身的旧方法</p><p>3、若子类覆盖了某属性，则子类引用调用子类重新定义的新属性</p><p>4、若子类未覆盖某属性，则子类引用调用父类本身的旧属性</p><p>5、子类引用可以访问子类新定义的方法</p><h3 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//B.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B.f1()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B.f2()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//C.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C.f1()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C.f3()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 父类引用指向子类对象</span>        b<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类覆盖了该方法，所以父类引用调用新方法</span>        b<span class="token punctuation">.</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类未覆盖该方法，所以父类引用调用旧方法</span>        <span class="token comment" spellcheck="true">// b.f3();此行去掉注释会报错，父类引用不能访问子类新定义方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类覆盖了该属性，但父类引用仍旧访问旧属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类未覆盖该属性，父类访问旧属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         C c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类引用指向自身对象</span>        c<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类覆盖了父类方法，所以调用新方法</span>        c<span class="token punctuation">.</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类未覆盖父类方法，所以调用旧方法</span>        c<span class="token punctuation">.</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类调用自己新定义的方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类覆盖了该属性，所以访问新属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 子类未覆盖该属性，所以访问旧属性</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class=" language-shell"><code class="language-shell">C.f1()B.f2()12 C.f1()B.f2()C.f3()32</code></pre><h2 id="构造方法与重载"><a href="#构造方法与重载" class="headerlink" title="构造方法与重载"></a>构造方法与重载</h2><p><strong>构造方法负责对象成员的初始值化工作</strong><br>1.方法名与类名相同<br>2.没有返回类型（void也不行）<br>3.构造方法是在创建实例时会被自动调用<br>4.一个类可能没有构造方法，但一定有系统隐蔽无参的构造方法，也有多个构造方法（他们之间构成重载）<br>5.定义了有参数的构造方法，就会屏蔽掉系统无参构造方法<br>6.构造方法不能被继承<br><strong>重载是名称相同、但参数不同的方法</strong><br>1.一个类中存在着两个以上同名方法<br>2.这两个方法的参数的组合必须不同（参数的数目不同或参数的类型的组合不同）<br>3.返回值不能作为两个方法是否构成重载的依据</p><h2 id="Java对象初始化"><a href="#Java对象初始化" class="headerlink" title="Java对象初始化"></a>Java对象初始化</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitializeDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> InitializeDemo t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitializeDemo</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> InitializeDemo t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitializeDemo</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"静态块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"j"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"构造块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">InitializeDemo</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">"   i="</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"    n="</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token operator">++</span>n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">print</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">"   i="</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"    n="</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>n<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">InitializeDemo</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>核心理念</strong>：</p><ol><li><p>静态属性和静态代码块都是在类加载的时候初始化和执行，两者的优先级别是一致的，且高于非静态成员，执行按照编码顺序。</p></li><li><p>非静态属性和匿名构造器在所有的构造方法之前执行，两者的优先级别一致，执行按照编码顺序。</p></li><li><p>以上执行完毕后执行构造方法中的代码。</p></li></ol><pre class=" language-shell"><code class="language-shell">1:j   i=0    n=02:构造块   i=1    n=13:t1   i=2    n=24:j   i=3    n=35:构造块   i=4    n=46:t2   i=5    n=57:i   i=6    n=68:静态块   i=7    n=999:j   i=8    n=10010:构造块   i=9    n=10111:init   i=10    n=102</code></pre><ol><li><p>运行main方法的时候，JVM会调用ClassLoader来加载<code>InitializeDemo</code>类，那么一起源于这次加载。</p></li><li><p>上面有四个静态属性，所以会按顺序逐一初始化这四个静态属性。</p></li><li><p><code>private static int k = 1;</code> 此时将k初始化为1。</p></li><li><p><code>private static InitializeDemo t1 = new InitializeDemo(&quot;t1&quot;);</code>创建<code>InitializeDemo</code>对象，那么按照核心理念中的顺序，先执行<code>private int j = print(&quot;j&quot;);</code>，打印出j，然后执行构造块，最后执行构造方法。</p></li><li><p><code>private static InitializeDemo t2 = new InitializeDemo(&quot;t2&quot;);</code>同步骤4。</p></li><li><p><code>private static int i = print(&quot;i&quot;);</code>打印i。</p></li><li><p><code>private static int n = 99;</code>直到这一步，n才被赋值为99，之前是从默认的0开始++的。</p></li><li><p>静态属性初始化完毕，代码走到静态块，打印出静态块，此时<code>n=99</code>。</p></li><li><p>静态属性和静态块执行完毕，然后执行main方法中的代码<code>new InitializeDemo(&quot;init&quot;);</code></p></li><li><p>main方法中创建对象，先初始化非静态属性，<code>private int j = print(&quot;j&quot;);</code>打印j，然后执行构造块，最后执行构造方法。</p></li></ol><blockquote><p>（静态属性=静态代码块）&gt; （非静态属性 = 构造块）&gt; 构造方法</p></blockquote><p><strong>总结一下核心理念</strong>：</p><ol><li>静态只在类加载的时候执行，且执行一次。</li><li>非静态只在实例化的时候执行，且每次实例化都执行。</li><li>静态在非静态之前执行。</li><li>静态属性和静态块的执行顺序取决于编码顺序，对它们一视同仁。</li><li>非静态属性和构造块的执行顺取决于编码顺序，对它们也一视同仁。</li><li>最后执行构造方法。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于Java&quot;&gt;&lt;a href=&quot;#关于Java&quot; class=&quot;headerlink&quot; title=&quot;关于Java&quot;&gt;&lt;/a&gt;关于Java&lt;/h1&gt;&lt;h2 id=&quot;可变参数&quot;&gt;&lt;a href=&quot;#可变参数&quot; class=&quot;headerlink&quot; title=&quot;可</summary>
      
    
    
    
    <category term="Summary" scheme="http://sasuke7chen.github.io/categories/Summary/"/>
    
    
    <category term="Java" scheme="http://sasuke7chen.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
